{
  "version": 3,
  "sources": ["../../.pnpm/vuetify@3.1.10_vite-plugin-vuetify@1.0.2_vue@3.2.47/node_modules/vuetify/src/components/VRating/VRating.tsx"],
  "sourcesContent": ["// Styles\nimport './VRating.sass'\n\n// Components\nimport { VBtn } from '@/components/VBtn'\n\n// Composables\nimport { IconValue } from '@/composables/icons'\nimport { makeDensityProps } from '@/composables/density'\nimport { makeSizeProps } from '@/composables/size'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { useLocale } from '@/composables/locale'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed, ref } from 'vue'\nimport { clamp, createRange, genericComponent, getUid, useRender } from '@/util'\n\n// Types\nimport type { Prop } from 'vue'\nimport type { Variant } from '@/composables/variant'\n\ntype VRatingItemSlot = {\n  value: number\n  index: number\n  isFilled: boolean\n  isHovered: boolean\n  icon: IconValue\n  color?: string\n  props: Record<string, unknown>\n}\n\ntype VRatingItemLabelSlot = {\n  value: number\n  index: number\n  label?: string\n}\n\ntype VRatingSlots = {\n  item: [VRatingItemSlot]\n  'item-label': [VRatingItemLabelSlot]\n}\n\nexport const VRating = genericComponent<VRatingSlots>()({\n  name: 'VRating',\n\n  props: {\n    name: String,\n    itemAriaLabel: {\n      type: String,\n      default: '$vuetify.rating.ariaLabel.item',\n    },\n    activeColor: String,\n    color: String,\n    clearable: Boolean,\n    disabled: Boolean,\n    emptyIcon: {\n      type: IconValue,\n      default: '$ratingEmpty',\n    },\n    fullIcon: {\n      type: IconValue,\n      default: '$ratingFull',\n    },\n    halfIncrements: Boolean,\n    hover: Boolean,\n    length: {\n      type: [Number, String],\n      default: 5,\n    },\n    readonly: Boolean,\n    modelValue: {\n      type: [Number, String],\n      default: 0,\n    },\n    itemLabels: Array as Prop<string[]>,\n    itemLabelPosition: {\n      type: String,\n      default: 'top',\n      validator: (v: any) => ['top', 'bottom'].includes(v),\n    },\n    ripple: Boolean,\n\n    ...makeDensityProps(),\n    ...makeSizeProps(),\n    ...makeTagProps(),\n    ...makeThemeProps(),\n  },\n\n  emits: {\n    'update:modelValue': (value: number | string) => true,\n  },\n\n  setup (props, { slots }) {\n    const { t } = useLocale()\n    const { themeClasses } = provideTheme(props)\n    const rating = useProxiedModel(props, 'modelValue')\n    const normalizedValue = computed(() => clamp(parseFloat(rating.value), 0, +props.length))\n\n    const range = computed(() => createRange(Number(props.length), 1))\n    const increments = computed(() => range.value.flatMap(v => props.halfIncrements ? [v - 0.5, v] : [v]))\n    const hoverIndex = ref(-1)\n    const focusIndex = ref(-1)\n    const firstRef = ref<HTMLElement>()\n    let isClicking = false\n\n    const itemState = computed(() => increments.value.map(value => {\n      const isHovering = props.hover && hoverIndex.value > -1\n      const isFilled = normalizedValue.value >= value\n      const isHovered = hoverIndex.value >= value\n      const isFullIcon = isHovering ? isHovered : isFilled\n      const icon = isFullIcon ? props.fullIcon : props.emptyIcon\n      const activeColor = props.activeColor ?? props.color\n      const color = (isFilled || isHovered) ? activeColor : props.color\n\n      return { isFilled, isHovered, icon, color }\n    }))\n\n    const eventState = computed(() => [0, ...increments.value].map(value => {\n      function onMouseenter () {\n        hoverIndex.value = value\n      }\n\n      function onMouseleave () {\n        hoverIndex.value = -1\n      }\n\n      function onFocus () {\n        if (value === 0 && normalizedValue.value === 0) {\n          firstRef.value?.focus()\n        } else {\n          focusIndex.value = value\n        }\n      }\n\n      function onBlur () {\n        if (!isClicking) focusIndex.value = -1\n      }\n\n      function onClick () {\n        if (props.disabled || props.readonly) return\n        rating.value = normalizedValue.value === value && props.clearable ? 0 : value\n      }\n\n      return {\n        onMouseenter: props.hover ? onMouseenter : undefined,\n        onMouseleave: props.hover ? onMouseleave : undefined,\n        onFocus,\n        onBlur,\n        onClick,\n      }\n    }))\n\n    function onMousedown () {\n      isClicking = true\n    }\n\n    function onMouseup () {\n      isClicking = false\n    }\n\n    const name = computed(() => props.name ?? `v-rating-${getUid()}`)\n\n    function VRatingItem ({ value, index, showStar = true }: { value: number, index: number, showStar?: boolean }) {\n      const { onMouseenter, onMouseleave, onFocus, onBlur, onClick } = eventState.value[index + 1]\n      const id = `${name.value}-${String(value).replace('.', '-')}`\n      const btnProps = {\n        color: itemState.value[index]?.color,\n        density: props.density,\n        disabled: props.disabled,\n        icon: itemState.value[index]?.icon,\n        ripple: props.ripple,\n        size: props.size,\n        tag: 'span',\n        variant: 'plain' as Variant,\n      }\n\n      return (\n        <>\n          <label\n            for={ id }\n            class={{\n              'v-rating__item--half': props.halfIncrements && value % 1 > 0,\n              'v-rating__item--full': props.halfIncrements && value % 1 === 0,\n            }}\n            onMousedown={ onMousedown }\n            onMouseup={ onMouseup }\n            onMouseenter={ onMouseenter }\n            onMouseleave={ onMouseleave }\n          >\n            <span class=\"v-rating__hidden\">{ t(props.itemAriaLabel, value, props.length) }</span>\n            {\n              !showStar ? undefined\n              : slots.item ? slots.item({\n                ...itemState.value[index],\n                props: btnProps,\n                value,\n                index,\n              })\n              : (\n                <VBtn { ...btnProps } />\n              )\n            }\n          </label>\n\n          <input\n            class=\"v-rating__hidden\"\n            name={ name.value }\n            id={ id }\n            type=\"radio\"\n            value={ value }\n            checked={ normalizedValue.value === value }\n            onClick={ onClick }\n            onFocus={ onFocus }\n            onBlur={ onBlur }\n            ref={ index === 0 ? firstRef : undefined }\n            readonly={ props.readonly }\n            disabled={ props.disabled }\n          />\n        </>\n      )\n    }\n\n    function createLabel (labelProps: { value: number, index: number, label?: string }) {\n      if (slots['item-label']) return slots['item-label'](labelProps)\n\n      if (labelProps.label) return <span>{ labelProps.label }</span>\n\n      return <span>&nbsp;</span>\n    }\n\n    useRender(() => {\n      const hasLabels = !!props.itemLabels?.length || slots['item-label']\n\n      return (\n        <props.tag\n          class={[\n            'v-rating',\n            {\n              'v-rating--hover': props.hover,\n              'v-rating--readonly': props.readonly,\n            },\n            themeClasses.value,\n          ]}\n        >\n          <VRatingItem value={ 0 } index={ -1 } showStar={ false } />\n\n          { range.value.map((value, i) => (\n            <div class=\"v-rating__wrapper\">\n              {\n                hasLabels && props.itemLabelPosition === 'top'\n                  ? createLabel({ value, index: i, label: props.itemLabels?.[i] })\n                  : undefined\n              }\n              <div\n                class={[\n                  'v-rating__item',\n                  {\n                    'v-rating__item--focused': Math.ceil(focusIndex.value) === value,\n                  },\n                ]}\n              >\n                { props.halfIncrements ? (\n                  <>\n                    <VRatingItem value={ value - 0.5 } index={ i * 2 } />\n                    <VRatingItem value={ value } index={ (i * 2) + 1 } />\n                  </>\n                ) : (\n                  <VRatingItem value={ value } index={ i } />\n                )}\n              </div>\n              {\n                hasLabels && props.itemLabelPosition === 'bottom'\n                  ? createLabel({ value, index: i, label: props.itemLabels?.[i] })\n                  : undefined\n              }\n            </div>\n          ))}\n        </props.tag>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VRating = InstanceType<typeof VRating>\n"],
  "mappings": "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",
  "names": ["VRating", "genericComponent", "name", "props", "String", "itemAriaLabel", "type", "default", "activeColor", "color", "clearable", "Boolean", "disabled", "emptyIcon", "IconValue", "fullIcon", "halfIncrements", "hover", "length", "Number", "readonly", "modelValue", "itemLabels", "Array", "itemLabelPosition", "validator", "v", "includes", "ripple", "makeDensityProps", "makeSizeProps", "makeTagProps", "makeThemeProps", "emits", "value", "setup", "slots", "t", "useLocale", "themeClasses", "provideTheme", "rating", "useProxiedModel", "normalizedValue", "computed", "clamp", "parseFloat", "range", "createRange", "increments", "flatMap", "hoverIndex", "ref", "focusIndex", "firstRef", "isClicking", "itemState", "map", "isHovering", "isFilled", "isHovered", "isFullIcon", "icon", "eventState", "onMouseenter", "onMouseleave", "onFocus", "focus", "onBlur", "onClick", "undefined", "onMousedown", "onMouseup", "getUid", "VRatingItem", "index", "showStar", "id", "replace", "btnProps", "density", "size", "tag", "variant", "item", "createLabel", "labelProps", "label", "useRender", "hasLabels", "i", "Math", "ceil"]
}
